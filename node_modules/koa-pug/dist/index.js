"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const pug_1 = __importDefault(require("pug"));
const lodash_merge_1 = __importDefault(require("lodash.merge"));
const lodash_isplainobject_1 = __importDefault(require("lodash.isplainobject"));
const lodash_forin_1 = __importDefault(require("lodash.forin"));
const path_1 = __importDefault(require("path"));
const assert_1 = __importDefault(require("assert"));
const load_helpers_1 = __importDefault(require("./load-helpers"));
class KoaPug {
    constructor(options) {
        this.defaultOptions = {
            compileDebug: false,
            debug: false
        };
        this.defaultLocals = {};
        this.options = options;
    }
    get locals() {
        return this.defaultLocals;
    }
    set locals(value) {
        assert_1.default(lodash_isplainobject_1.default(value), `"locals" requires a plain object`);
        this.defaultLocals = value;
    }
    get options() {
        return this.defaultOptions;
    }
    set options(options) {
        if (!options || !lodash_isplainobject_1.default(options)) {
            return;
        }
        if (!Object.keys(options).length) {
            this.defaultOptions = {};
            return;
        }
        this.viewPath = typeof options.viewPath === 'string' ? options.viewPath : process.cwd();
        if (lodash_isplainobject_1.default(options.locals)) {
            this.defaultLocals = options.locals;
        }
        // tslint:disable-next-line
        if (typeof options.helperPath === 'string' || Array.isArray(options.helperPath)) {
            this.helpers = lodash_merge_1.default({}, this.helpers, load_helpers_1.default(options.helperPath));
        }
        const nonPugKeys = ['viewPath', 'locals', 'helperPath', 'app'];
        lodash_forin_1.default(options, (value, key) => {
            if (!nonPugKeys.includes(key)) {
                this.defaultOptions[key] = value;
            }
        });
        if (options.app && options.app.context) {
            this.use(options.app);
        }
    }
    /**
     * Compile .pug file
     * @param tpl The path of template file
     * @param locals Variables and helpers that passed to Pug compiler
     * @param compileOptions
     */
    async compileFile(tpl, locals, compileOptions) {
        let tplPath;
        const dests = [];
        if (tpl.endsWith('.pug')) {
            dests.push(path_1.default.resolve(this.viewPath, tpl));
        }
        else {
            // Search .pug files
            const base = path_1.default.resolve(this.viewPath, tpl);
            dests.push(base + '.pug', path_1.default.join(base, 'index.pug'));
        }
        for (const dest of dests) {
            try {
                const stat = await fs_extra_1.default.stat(dest);
                if (stat.isFile()) {
                    tplPath = dest;
                    break;
                }
            }
            catch (e) {
                if (e.code !== 'ENOENT') {
                    throw e;
                }
            }
        }
        assert_1.default(typeof tplPath === 'string', `"tpl" does not exist: ${tpl}`);
        compileOptions.filename = tplPath;
        return pug_1.default.compileFile(tplPath, compileOptions)(locals);
    }
    /**
     * Compile a Pug template string
     * @param tpl Template string or the path of template file
     */
    async compileString(tpl, locals, compileOptions) {
        return pug_1.default.compile(tpl, compileOptions)(locals);
    }
    /**
     * Render Pug tamplate
     * @param tpl Template string or the path of template file
     * @param locals Variables and helpers that passed to Pug compiler
     * @param options
     */
    async render(tpl, locals, options) {
        const compileOptions = lodash_merge_1.default({}, this.defaultOptions);
        if (lodash_isplainobject_1.default(options)) {
            lodash_merge_1.default(compileOptions, options);
        }
        if (compileOptions.fromString) {
            return this.compileString(tpl, locals, compileOptions);
        }
        return this.compileFile(tpl, locals, compileOptions);
    }
    /**
     * Bind render function to Koa context
     * @param app Koa instance
     */
    use(app) {
        const self = this;
        app.context.render = async function (tpl, locals, options) {
            const ctx = this;
            const finalLocals = lodash_merge_1.default({}, self.helpers, self.defaultLocals, ctx.state, locals);
            ctx.body = await self.render(tpl, finalLocals, options);
            ctx.type = 'text/html';
        };
    }
}
exports.KoaPug = KoaPug;
exports.default = KoaPug;
module.exports = KoaPug;
module.exports.default = KoaPug;
