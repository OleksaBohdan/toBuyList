"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const lodash_isobject_1 = __importDefault(require("lodash.isobject"));
const lodash_forin_1 = __importDefault(require("lodash.forin"));
const lodash_camelcase_1 = __importDefault(require("lodash.camelcase"));
const assert_1 = __importDefault(require("assert"));
function loadHelpers(dirs) {
    const helpers = {};
    if (Array.isArray(dirs)) {
        dirs.forEach(function (item) {
            if (lodash_isobject_1.default(item)) {
                lodash_forin_1.default(item, function (value, key) {
                    if (typeof value === 'string') {
                        load(value, key);
                    }
                    else {
                        assert_1.default(typeof value === 'function', `Cannot load helper: ${key}, requires a function:${value}`);
                        helpers[key] = value;
                    }
                });
            }
            else {
                load(item);
            }
        });
    }
    else {
        load(dirs);
    }
    function load(dir, moduleName) {
        let fullPath = path_1.default.resolve(dir);
        let stat = fs_1.default.statSync(fullPath);
        if (stat.isDirectory()) {
            fs_1.default.readdirSync(dir).forEach(function (file) {
                load(dir + '/' + file);
            });
        }
        else if (stat.isFile()) {
            let mod = require(fullPath);
            if (typeof moduleName === 'string') {
                helpers[moduleName] = mod;
            }
            else if (typeof mod.moduleName === 'string') {
                helpers[mod.moduleName] = mod.moduleBody;
            }
            else {
                helpers[lodash_camelcase_1.default(path_1.default.basename(fullPath, path_1.default.extname(fullPath)))] = mod;
            }
        }
    }
    return helpers;
}
exports.default = loadHelpers;
